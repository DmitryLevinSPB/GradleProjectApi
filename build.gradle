plugins {
    id 'java-library'
    id 'io.qameta.allure-adapter' version '2.11.2'  // Используем правильный ID плагина
    id 'io.qameta.allure' version '2.11.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


def slf4jVersion = "1.7.32"
dependencies {
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'junit:junit:4.13.2'
    implementation 'io.cucumber:cucumber-java:7.20.1'
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.1'
    implementation 'com.codeborne:selenide:7.5.1'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    testImplementation 'io.qameta.allure:allure-junit5:2.23.0'
}

task hello {
    doLast {
        println 'Привет, Gradle!'
    }
}

test {
    useJUnitPlatform()
    systemProperty 'allure.results.directory',
            "${System.env.WORKSPACE}\\build\\allure-results"
}


allure {
    version = '2.23.0'
    autoconfigure = true
    adapter {
        useJUnit5 {
            version = '2.23.0'
        }
        report {
            version.set("2.20.1")
        }
    }
}
// Задача для генерации Allure отчета
task generateAllureReport(type: Exec) {
    dependsOn 'test'
    commandLine 'allure', 'generate', 'build/allure-results', '-o', 'build/reports/allure-report'
}

// Задача для открытия отчета (опционально)
task openAllureReport(type: Exec) {
    dependsOn 'generateAllureReport'
    commandLine 'allure', 'open', 'build/reports/allure-report'
}
